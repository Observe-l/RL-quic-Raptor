// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.12
// source: quicfec.proto

package quicfec

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FecScheme int32

const (
	FecScheme_FEC_RLC     FecScheme = 0
	FecScheme_FEC_RAPTORQ FecScheme = 1
)

// Enum value maps for FecScheme.
var (
	FecScheme_name = map[int32]string{
		0: "FEC_RLC",
		1: "FEC_RAPTORQ",
	}
	FecScheme_value = map[string]int32{
		"FEC_RLC":     0,
		"FEC_RAPTORQ": 1,
	}
)

func (x FecScheme) Enum() *FecScheme {
	p := new(FecScheme)
	*p = x
	return p
}

func (x FecScheme) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FecScheme) Descriptor() protoreflect.EnumDescriptor {
	return file_quicfec_proto_enumTypes[0].Descriptor()
}

func (FecScheme) Type() protoreflect.EnumType {
	return &file_quicfec_proto_enumTypes[0]
}

func (x FecScheme) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FecScheme.Descriptor instead.
func (FecScheme) EnumDescriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{0}
}

type RaptorQParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadBytes          uint32  `protobuf:"varint,1,opt,name=payload_bytes,json=payloadBytes,proto3" json:"payload_bytes,omitempty"`               // per-packet payload
	KPackets              uint32  `protobuf:"varint,2,opt,name=k_packets,json=kPackets,proto3" json:"k_packets,omitempty"`                           // source packets per block/window
	RepairPackets         uint32  `protobuf:"varint,3,opt,name=repair_packets,json=repairPackets,proto3" json:"repair_packets,omitempty"`            // number of repair packets (or prefer rate)
	SymbolBytes           uint32  `protobuf:"varint,4,opt,name=symbol_bytes,json=symbolBytes,proto3" json:"symbol_bytes,omitempty"`                  // symbol size (often aligns with payload)
	CodingWindowPkts      uint32  `protobuf:"varint,5,opt,name=coding_window_pkts,json=codingWindowPkts,proto3" json:"coding_window_pkts,omitempty"` // window/block size
	MaxRepairsPerRtt      uint32  `protobuf:"varint,6,opt,name=max_repairs_per_rtt,json=maxRepairsPerRtt,proto3" json:"max_repairs_per_rtt,omitempty"`
	TargetOverheadPct     float32 `protobuf:"fixed32,7,opt,name=target_overhead_pct,json=targetOverheadPct,proto3" json:"target_overhead_pct,omitempty"` // 0..100
	InterleaverSpan       uint32  `protobuf:"varint,8,opt,name=interleaver_span,json=interleaverSpan,proto3" json:"interleaver_span,omitempty"`          // for burst resilience
	EsiSeed               uint64  `protobuf:"varint,9,opt,name=esi_seed,json=esiSeed,proto3" json:"esi_seed,omitempty"`
	DecodeDeadlineMs      uint32  `protobuf:"varint,10,opt,name=decode_deadline_ms,json=decodeDeadlineMs,proto3" json:"decode_deadline_ms,omitempty"`
	InactivationThreshold uint32  `protobuf:"varint,11,opt,name=inactivation_threshold,json=inactivationThreshold,proto3" json:"inactivation_threshold,omitempty"`
	EncoderThreads        uint32  `protobuf:"varint,12,opt,name=encoder_threads,json=encoderThreads,proto3" json:"encoder_threads,omitempty"`
	DecoderThreads        uint32  `protobuf:"varint,13,opt,name=decoder_threads,json=decoderThreads,proto3" json:"decoder_threads,omitempty"`
}

func (x *RaptorQParams) Reset() {
	*x = RaptorQParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaptorQParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaptorQParams) ProtoMessage() {}

func (x *RaptorQParams) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaptorQParams.ProtoReflect.Descriptor instead.
func (*RaptorQParams) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{0}
}

func (x *RaptorQParams) GetPayloadBytes() uint32 {
	if x != nil {
		return x.PayloadBytes
	}
	return 0
}

func (x *RaptorQParams) GetKPackets() uint32 {
	if x != nil {
		return x.KPackets
	}
	return 0
}

func (x *RaptorQParams) GetRepairPackets() uint32 {
	if x != nil {
		return x.RepairPackets
	}
	return 0
}

func (x *RaptorQParams) GetSymbolBytes() uint32 {
	if x != nil {
		return x.SymbolBytes
	}
	return 0
}

func (x *RaptorQParams) GetCodingWindowPkts() uint32 {
	if x != nil {
		return x.CodingWindowPkts
	}
	return 0
}

func (x *RaptorQParams) GetMaxRepairsPerRtt() uint32 {
	if x != nil {
		return x.MaxRepairsPerRtt
	}
	return 0
}

func (x *RaptorQParams) GetTargetOverheadPct() float32 {
	if x != nil {
		return x.TargetOverheadPct
	}
	return 0
}

func (x *RaptorQParams) GetInterleaverSpan() uint32 {
	if x != nil {
		return x.InterleaverSpan
	}
	return 0
}

func (x *RaptorQParams) GetEsiSeed() uint64 {
	if x != nil {
		return x.EsiSeed
	}
	return 0
}

func (x *RaptorQParams) GetDecodeDeadlineMs() uint32 {
	if x != nil {
		return x.DecodeDeadlineMs
	}
	return 0
}

func (x *RaptorQParams) GetInactivationThreshold() uint32 {
	if x != nil {
		return x.InactivationThreshold
	}
	return 0
}

func (x *RaptorQParams) GetEncoderThreads() uint32 {
	if x != nil {
		return x.EncoderThreads
	}
	return 0
}

func (x *RaptorQParams) GetDecoderThreads() uint32 {
	if x != nil {
		return x.DecoderThreads
	}
	return 0
}

type QuicParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CongestionCtrl      string  `protobuf:"bytes,1,opt,name=congestion_ctrl,json=congestionCtrl,proto3" json:"congestion_ctrl,omitempty"` // "cubic","reno","bbr"
	InitialCwndPkts     uint32  `protobuf:"varint,2,opt,name=initial_cwnd_pkts,json=initialCwndPkts,proto3" json:"initial_cwnd_pkts,omitempty"`
	MaxDatagramSize     uint32  `protobuf:"varint,3,opt,name=max_datagram_size,json=maxDatagramSize,proto3" json:"max_datagram_size,omitempty"`
	PacingGain          float32 `protobuf:"fixed32,4,opt,name=pacing_gain,json=pacingGain,proto3" json:"pacing_gain,omitempty"`
	AckFrequency        uint32  `protobuf:"varint,5,opt,name=ack_frequency,json=ackFrequency,proto3" json:"ack_frequency,omitempty"`
	ReorderingThreshold uint32  `protobuf:"varint,6,opt,name=reordering_threshold,json=reorderingThreshold,proto3" json:"reordering_threshold,omitempty"`
	StreamCount         uint32  `protobuf:"varint,7,opt,name=stream_count,json=streamCount,proto3" json:"stream_count,omitempty"`
	SendBufferBytes     uint64  `protobuf:"varint,8,opt,name=send_buffer_bytes,json=sendBufferBytes,proto3" json:"send_buffer_bytes,omitempty"`
}

func (x *QuicParams) Reset() {
	*x = QuicParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuicParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuicParams) ProtoMessage() {}

func (x *QuicParams) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuicParams.ProtoReflect.Descriptor instead.
func (*QuicParams) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{1}
}

func (x *QuicParams) GetCongestionCtrl() string {
	if x != nil {
		return x.CongestionCtrl
	}
	return ""
}

func (x *QuicParams) GetInitialCwndPkts() uint32 {
	if x != nil {
		return x.InitialCwndPkts
	}
	return 0
}

func (x *QuicParams) GetMaxDatagramSize() uint32 {
	if x != nil {
		return x.MaxDatagramSize
	}
	return 0
}

func (x *QuicParams) GetPacingGain() float32 {
	if x != nil {
		return x.PacingGain
	}
	return 0
}

func (x *QuicParams) GetAckFrequency() uint32 {
	if x != nil {
		return x.AckFrequency
	}
	return 0
}

func (x *QuicParams) GetReorderingThreshold() uint32 {
	if x != nil {
		return x.ReorderingThreshold
	}
	return 0
}

func (x *QuicParams) GetStreamCount() uint32 {
	if x != nil {
		return x.StreamCount
	}
	return 0
}

func (x *QuicParams) GetSendBufferBytes() uint64 {
	if x != nil {
		return x.SendBufferBytes
	}
	return 0
}

type NetScenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev           string  `protobuf:"bytes,1,opt,name=dev,proto3" json:"dev,omitempty"`                                  // e.g., "eth0" or veth peer name
	UseEgress     bool    `protobuf:"varint,2,opt,name=use_egress,json=useEgress,proto3" json:"use_egress,omitempty"`    // apply shaping on egress (root qdisc)
	UseIngress    bool    `protobuf:"varint,3,opt,name=use_ingress,json=useIngress,proto3" json:"use_ingress,omitempty"` // apply shaping on ingress (via IFB)
	RttMsMean     float32 `protobuf:"fixed32,4,opt,name=rtt_ms_mean,json=rttMsMean,proto3" json:"rtt_ms_mean,omitempty"`
	RttJitterMs   float32 `protobuf:"fixed32,5,opt,name=rtt_jitter_ms,json=rttJitterMs,proto3" json:"rtt_jitter_ms,omitempty"`
	BandwidthMbps float32 `protobuf:"fixed32,6,opt,name=bandwidth_mbps,json=bandwidthMbps,proto3" json:"bandwidth_mbps,omitempty"` // 0 means unlimited
	LossRate      float32 `protobuf:"fixed32,7,opt,name=loss_rate,json=lossRate,proto3" json:"loss_rate,omitempty"`                // 0..1
	ReorderRate   float32 `protobuf:"fixed32,8,opt,name=reorder_rate,json=reorderRate,proto3" json:"reorder_rate,omitempty"`       // 0..1
	BurstLenMean  float32 `protobuf:"fixed32,9,opt,name=burst_len_mean,json=burstLenMean,proto3" json:"burst_len_mean,omitempty"`
	RngSeed       uint64  `protobuf:"varint,10,opt,name=rng_seed,json=rngSeed,proto3" json:"rng_seed,omitempty"` // for reproducible randomization
}

func (x *NetScenario) Reset() {
	*x = NetScenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetScenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetScenario) ProtoMessage() {}

func (x *NetScenario) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetScenario.ProtoReflect.Descriptor instead.
func (*NetScenario) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{2}
}

func (x *NetScenario) GetDev() string {
	if x != nil {
		return x.Dev
	}
	return ""
}

func (x *NetScenario) GetUseEgress() bool {
	if x != nil {
		return x.UseEgress
	}
	return false
}

func (x *NetScenario) GetUseIngress() bool {
	if x != nil {
		return x.UseIngress
	}
	return false
}

func (x *NetScenario) GetRttMsMean() float32 {
	if x != nil {
		return x.RttMsMean
	}
	return 0
}

func (x *NetScenario) GetRttJitterMs() float32 {
	if x != nil {
		return x.RttJitterMs
	}
	return 0
}

func (x *NetScenario) GetBandwidthMbps() float32 {
	if x != nil {
		return x.BandwidthMbps
	}
	return 0
}

func (x *NetScenario) GetLossRate() float32 {
	if x != nil {
		return x.LossRate
	}
	return 0
}

func (x *NetScenario) GetReorderRate() float32 {
	if x != nil {
		return x.ReorderRate
	}
	return 0
}

func (x *NetScenario) GetBurstLenMean() float32 {
	if x != nil {
		return x.BurstLenMean
	}
	return 0
}

func (x *NetScenario) GetRngSeed() uint64 {
	if x != nil {
		return x.RngSeed
	}
	return 0
}

type ExperimentConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scheme FecScheme      `protobuf:"varint,1,opt,name=scheme,proto3,enum=quicfec.FecScheme" json:"scheme,omitempty"` // RLC or RAPTORQ only
	Rq     *RaptorQParams `protobuf:"bytes,2,opt,name=rq,proto3" json:"rq,omitempty"`                                 // used when scheme == RAPTORQ (ignored otherwise)
	Quic   *QuicParams    `protobuf:"bytes,3,opt,name=quic,proto3" json:"quic,omitempty"`
	Net    *NetScenario   `protobuf:"bytes,4,opt,name=net,proto3" json:"net,omitempty"`
}

func (x *ExperimentConfig) Reset() {
	*x = ExperimentConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExperimentConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExperimentConfig) ProtoMessage() {}

func (x *ExperimentConfig) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExperimentConfig.ProtoReflect.Descriptor instead.
func (*ExperimentConfig) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{3}
}

func (x *ExperimentConfig) GetScheme() FecScheme {
	if x != nil {
		return x.Scheme
	}
	return FecScheme_FEC_RLC
}

func (x *ExperimentConfig) GetRq() *RaptorQParams {
	if x != nil {
		return x.Rq
	}
	return nil
}

func (x *ExperimentConfig) GetQuic() *QuicParams {
	if x != nil {
		return x.Quic
	}
	return nil
}

func (x *ExperimentConfig) GetNet() *NetScenario {
	if x != nil {
		return x.Net
	}
	return nil
}

type Observation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features       []float64 `protobuf:"fixed64,1,rep,packed,name=features,proto3" json:"features,omitempty"` // normalized features for RL
	RttMsP95       float64   `protobuf:"fixed64,2,opt,name=rtt_ms_p95,json=rttMsP95,proto3" json:"rtt_ms_p95,omitempty"`
	GoodputMbps    float64   `protobuf:"fixed64,3,opt,name=goodput_mbps,json=goodputMbps,proto3" json:"goodput_mbps,omitempty"`
	FecOverheadPct float64   `protobuf:"fixed64,4,opt,name=fec_overhead_pct,json=fecOverheadPct,proto3" json:"fec_overhead_pct,omitempty"`
	LossRateEwma   float64   `protobuf:"fixed64,5,opt,name=loss_rate_ewma,json=lossRateEwma,proto3" json:"loss_rate_ewma,omitempty"`
	BurstEstimate  float64   `protobuf:"fixed64,6,opt,name=burst_estimate,json=burstEstimate,proto3" json:"burst_estimate,omitempty"`
}

func (x *Observation) Reset() {
	*x = Observation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Observation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Observation) ProtoMessage() {}

func (x *Observation) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Observation.ProtoReflect.Descriptor instead.
func (*Observation) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{4}
}

func (x *Observation) GetFeatures() []float64 {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Observation) GetRttMsP95() float64 {
	if x != nil {
		return x.RttMsP95
	}
	return 0
}

func (x *Observation) GetGoodputMbps() float64 {
	if x != nil {
		return x.GoodputMbps
	}
	return 0
}

func (x *Observation) GetFecOverheadPct() float64 {
	if x != nil {
		return x.FecOverheadPct
	}
	return 0
}

func (x *Observation) GetLossRateEwma() float64 {
	if x != nil {
		return x.LossRateEwma
	}
	return 0
}

func (x *Observation) GetBurstEstimate() float64 {
	if x != nil {
		return x.BurstEstimate
	}
	return 0
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RepairRate  float32 `protobuf:"fixed32,1,opt,name=repair_rate,json=repairRate,proto3" json:"repair_rate,omitempty"`   // 0..0.5
	WindowPkts  uint32  `protobuf:"varint,2,opt,name=window_pkts,json=windowPkts,proto3" json:"window_pkts,omitempty"`    // 8..256
	SymbolBytes uint32  `protobuf:"varint,3,opt,name=symbol_bytes,json=symbolBytes,proto3" json:"symbol_bytes,omitempty"` // 256..4096
	PacingGain  float32 `protobuf:"fixed32,4,opt,name=pacing_gain,json=pacingGain,proto3" json:"pacing_gain,omitempty"`   // 0.5..2
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{5}
}

func (x *Action) GetRepairRate() float32 {
	if x != nil {
		return x.RepairRate
	}
	return 0
}

func (x *Action) GetWindowPkts() uint32 {
	if x != nil {
		return x.WindowPkts
	}
	return 0
}

func (x *Action) GetSymbolBytes() uint32 {
	if x != nil {
		return x.SymbolBytes
	}
	return 0
}

func (x *Action) GetPacingGain() float32 {
	if x != nil {
		return x.PacingGain
	}
	return 0
}

type StepRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *Action `protobuf:"bytes,1,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *StepRequest) Reset() {
	*x = StepRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepRequest) ProtoMessage() {}

func (x *StepRequest) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepRequest.ProtoReflect.Descriptor instead.
func (*StepRequest) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{6}
}

func (x *StepRequest) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

type StepMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThroughputMbps    float64 `protobuf:"fixed64,1,opt,name=throughput_mbps,json=throughputMbps,proto3" json:"throughput_mbps,omitempty"`
	CwndPkts          float64 `protobuf:"fixed64,2,opt,name=cwnd_pkts,json=cwndPkts,proto3" json:"cwnd_pkts,omitempty"`
	InflightPkts      float64 `protobuf:"fixed64,3,opt,name=inflight_pkts,json=inflightPkts,proto3" json:"inflight_pkts,omitempty"`
	RttMsP50          float64 `protobuf:"fixed64,4,opt,name=rtt_ms_p50,json=rttMsP50,proto3" json:"rtt_ms_p50,omitempty"`
	RttMsP95          float64 `protobuf:"fixed64,5,opt,name=rtt_ms_p95,json=rttMsP95,proto3" json:"rtt_ms_p95,omitempty"`
	RttMsP99          float64 `protobuf:"fixed64,6,opt,name=rtt_ms_p99,json=rttMsP99,proto3" json:"rtt_ms_p99,omitempty"`
	DecodeSuccessRate float64 `protobuf:"fixed64,7,opt,name=decode_success_rate,json=decodeSuccessRate,proto3" json:"decode_success_rate,omitempty"`
	BlocksTotal       uint32  `protobuf:"varint,8,opt,name=blocks_total,json=blocksTotal,proto3" json:"blocks_total,omitempty"`
	BlocksCompleted   uint32  `protobuf:"varint,9,opt,name=blocks_completed,json=blocksCompleted,proto3" json:"blocks_completed,omitempty"`
	RepairsSent       uint32  `protobuf:"varint,10,opt,name=repairs_sent,json=repairsSent,proto3" json:"repairs_sent,omitempty"`
	OriginalSent      uint32  `protobuf:"varint,11,opt,name=original_sent,json=originalSent,proto3" json:"original_sent,omitempty"`
	ResidualErasures  uint32  `protobuf:"varint,12,opt,name=residual_erasures,json=residualErasures,proto3" json:"residual_erasures,omitempty"`
	EncodeTimeMsAvg   float64 `protobuf:"fixed64,13,opt,name=encode_time_ms_avg,json=encodeTimeMsAvg,proto3" json:"encode_time_ms_avg,omitempty"`
	DecodeTimeMsAvg   float64 `protobuf:"fixed64,14,opt,name=decode_time_ms_avg,json=decodeTimeMsAvg,proto3" json:"decode_time_ms_avg,omitempty"`
}

func (x *StepMetrics) Reset() {
	*x = StepMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepMetrics) ProtoMessage() {}

func (x *StepMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepMetrics.ProtoReflect.Descriptor instead.
func (*StepMetrics) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{7}
}

func (x *StepMetrics) GetThroughputMbps() float64 {
	if x != nil {
		return x.ThroughputMbps
	}
	return 0
}

func (x *StepMetrics) GetCwndPkts() float64 {
	if x != nil {
		return x.CwndPkts
	}
	return 0
}

func (x *StepMetrics) GetInflightPkts() float64 {
	if x != nil {
		return x.InflightPkts
	}
	return 0
}

func (x *StepMetrics) GetRttMsP50() float64 {
	if x != nil {
		return x.RttMsP50
	}
	return 0
}

func (x *StepMetrics) GetRttMsP95() float64 {
	if x != nil {
		return x.RttMsP95
	}
	return 0
}

func (x *StepMetrics) GetRttMsP99() float64 {
	if x != nil {
		return x.RttMsP99
	}
	return 0
}

func (x *StepMetrics) GetDecodeSuccessRate() float64 {
	if x != nil {
		return x.DecodeSuccessRate
	}
	return 0
}

func (x *StepMetrics) GetBlocksTotal() uint32 {
	if x != nil {
		return x.BlocksTotal
	}
	return 0
}

func (x *StepMetrics) GetBlocksCompleted() uint32 {
	if x != nil {
		return x.BlocksCompleted
	}
	return 0
}

func (x *StepMetrics) GetRepairsSent() uint32 {
	if x != nil {
		return x.RepairsSent
	}
	return 0
}

func (x *StepMetrics) GetOriginalSent() uint32 {
	if x != nil {
		return x.OriginalSent
	}
	return 0
}

func (x *StepMetrics) GetResidualErasures() uint32 {
	if x != nil {
		return x.ResidualErasures
	}
	return 0
}

func (x *StepMetrics) GetEncodeTimeMsAvg() float64 {
	if x != nil {
		return x.EncodeTimeMsAvg
	}
	return 0
}

func (x *StepMetrics) GetDecodeTimeMsAvg() float64 {
	if x != nil {
		return x.DecodeTimeMsAvg
	}
	return 0
}

type StepResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Obs      *Observation `protobuf:"bytes,1,opt,name=obs,proto3" json:"obs,omitempty"`
	Reward   float64      `protobuf:"fixed64,2,opt,name=reward,proto3" json:"reward,omitempty"`
	Done     bool         `protobuf:"varint,3,opt,name=done,proto3" json:"done,omitempty"`
	Metrics  *StepMetrics `protobuf:"bytes,4,opt,name=metrics,proto3" json:"metrics,omitempty"`
	InfoJson string       `protobuf:"bytes,5,opt,name=info_json,json=infoJson,proto3" json:"info_json,omitempty"` // raw detail for logging
}

func (x *StepResponse) Reset() {
	*x = StepResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_quicfec_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StepResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StepResponse) ProtoMessage() {}

func (x *StepResponse) ProtoReflect() protoreflect.Message {
	mi := &file_quicfec_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StepResponse.ProtoReflect.Descriptor instead.
func (*StepResponse) Descriptor() ([]byte, []int) {
	return file_quicfec_proto_rawDescGZIP(), []int{8}
}

func (x *StepResponse) GetObs() *Observation {
	if x != nil {
		return x.Obs
	}
	return nil
}

func (x *StepResponse) GetReward() float64 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *StepResponse) GetDone() bool {
	if x != nil {
		return x.Done
	}
	return false
}

func (x *StepResponse) GetMetrics() *StepMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *StepResponse) GetInfoJson() string {
	if x != nil {
		return x.InfoJson
	}
	return ""
}

var File_quicfec_proto protoreflect.FileDescriptor

var file_quicfec_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x04, 0x0a, 0x0d, 0x52, 0x61, 0x70, 0x74, 0x6f, 0x72,
	0x51, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x0a, 0x09,
	0x6b, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x6b, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x70,
	0x61, 0x69, 0x72, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x10, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x2d, 0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x74, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x50, 0x65, 0x72, 0x52, 0x74, 0x74,
	0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x50, 0x63, 0x74,
	0x12, 0x29, 0x0a, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x5f,
	0x73, 0x70, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x72, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x65,
	0x73, 0x69, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x65,
	0x73, 0x69, 0x53, 0x65, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x4d, 0x73, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x69, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x65,
	0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x64,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0xd5, 0x02,
	0x0a, 0x0a, 0x51, 0x75, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x0f,
	0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x74, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x63, 0x77, 0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x77, 0x6e, 0x64, 0x50, 0x6b, 0x74,
	0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61,
	0x6d, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61,
	0x78, 0x44, 0x61, 0x74, 0x61, 0x67, 0x72, 0x61, 0x6d, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x61, 0x69, 0x6e, 0x12, 0x23,
	0x0a, 0x0d, 0x61, 0x63, 0x6b, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x61, 0x63, 0x6b, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x12, 0x31, 0x0a, 0x14, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x68, 0x72,
	0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x6e,
	0x64, 0x5f, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x73, 0x65, 0x6e, 0x64, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x5f, 0x65,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x45, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e,
	0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x75, 0x73, 0x65,
	0x49, 0x6e, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0b, 0x72, 0x74, 0x74, 0x5f, 0x6d,
	0x73, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x72, 0x74,
	0x74, 0x4d, 0x73, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x72, 0x74, 0x74, 0x5f, 0x6a,
	0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x72, 0x74, 0x74, 0x4a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x4d, 0x62,
	0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x6c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x72, 0x73, 0x74, 0x5f, 0x6c, 0x65, 0x6e, 0x5f,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x62, 0x75, 0x72, 0x73,
	0x74, 0x4c, 0x65, 0x6e, 0x4d, 0x65, 0x61, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x6e, 0x67, 0x5f,
	0x73, 0x65, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x72, 0x6e, 0x67, 0x53,
	0x65, 0x65, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66,
	0x65, 0x63, 0x2e, 0x46, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x02, 0x72, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x52, 0x61, 0x70, 0x74, 0x6f,
	0x72, 0x51, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x02, 0x72, 0x71, 0x12, 0x27, 0x0a, 0x04,
	0x71, 0x75, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x71, 0x75, 0x69,
	0x63, 0x66, 0x65, 0x63, 0x2e, 0x51, 0x75, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52,
	0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x26, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x4e, 0x65, 0x74,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x22, 0xe1, 0x01,
	0x0a, 0x0b, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52,
	0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x74, 0x74,
	0x5f, 0x6d, 0x73, 0x5f, 0x70, 0x39, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72,
	0x74, 0x74, 0x4d, 0x73, 0x50, 0x39, 0x35, 0x12, 0x21, 0x0a, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x70,
	0x75, 0x74, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x67,
	0x6f, 0x6f, 0x64, 0x70, 0x75, 0x74, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x65,
	0x63, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x66, 0x65, 0x63, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61,
	0x64, 0x50, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x65, 0x77, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x6c, 0x6f,
	0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x45, 0x77, 0x6d, 0x61, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x75,
	0x72, 0x73, 0x74, 0x5f, 0x65, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0d, 0x62, 0x75, 0x72, 0x73, 0x74, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x22, 0x8e, 0x01, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x6b, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x5f, 0x67, 0x61, 0x69, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x47, 0x61,
	0x69, 0x6e, 0x22, 0x36, 0x0a, 0x0b, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x9f, 0x04, 0x0a, 0x0b, 0x53,
	0x74, 0x65, 0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x68,
	0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0e, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x70, 0x75, 0x74, 0x4d,
	0x62, 0x70, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x77, 0x6e, 0x64, 0x5f, 0x70, 0x6b, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x63, 0x77, 0x6e, 0x64, 0x50, 0x6b, 0x74, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6b, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x66, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x6b, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x5f,
	0x70, 0x35, 0x30, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x74, 0x74, 0x4d, 0x73,
	0x50, 0x35, 0x30, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x70, 0x39,
	0x35, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x50, 0x39,
	0x35, 0x12, 0x1c, 0x0a, 0x0a, 0x72, 0x74, 0x74, 0x5f, 0x6d, 0x73, 0x5f, 0x70, 0x39, 0x39, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x72, 0x74, 0x74, 0x4d, 0x73, 0x50, 0x39, 0x39, 0x12,
	0x2e, 0x0a, 0x13, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x64, 0x65,
	0x63, 0x6f, 0x64, 0x65, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x5f, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x61, 0x69, 0x72, 0x73, 0x53, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6e,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61,
	0x6c, 0x5f, 0x65, 0x72, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x72, 0x65, 0x73, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x45, 0x72, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x12,
	0x2b, 0x0a, 0x12, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x64, 0x65, 0x63,
	0x6f, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x73, 0x41, 0x76, 0x67, 0x22, 0xaf, 0x01, 0x0a,
	0x0c, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a,
	0x03, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x69,
	0x63, 0x66, 0x65, 0x63, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x03, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x6f, 0x6e,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x65,
	0x70, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x6f, 0x4a, 0x73, 0x6f, 0x6e, 0x2a, 0x29,
	0x0a, 0x09, 0x46, 0x65, 0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x46,
	0x45, 0x43, 0x5f, 0x52, 0x4c, 0x43, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x43, 0x5f,
	0x52, 0x41, 0x50, 0x54, 0x4f, 0x52, 0x51, 0x10, 0x01, 0x32, 0xb8, 0x01, 0x0a, 0x03, 0x45, 0x6e,
	0x76, 0x12, 0x3e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x12, 0x19,
	0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x72, 0x69, 0x6d,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x35, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x4f, 0x62, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x12, 0x14, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x2e, 0x53, 0x74,
	0x65, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x71, 0x75, 0x69, 0x63,
	0x66, 0x65, 0x63, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x2d, 0x67, 0x6f, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x2d,
	0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x71, 0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x3b, 0x71,
	0x75, 0x69, 0x63, 0x66, 0x65, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_quicfec_proto_rawDescOnce sync.Once
	file_quicfec_proto_rawDescData = file_quicfec_proto_rawDesc
)

func file_quicfec_proto_rawDescGZIP() []byte {
	file_quicfec_proto_rawDescOnce.Do(func() {
		file_quicfec_proto_rawDescData = protoimpl.X.CompressGZIP(file_quicfec_proto_rawDescData)
	})
	return file_quicfec_proto_rawDescData
}

var file_quicfec_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_quicfec_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_quicfec_proto_goTypes = []interface{}{
	(FecScheme)(0),           // 0: quicfec.FecScheme
	(*RaptorQParams)(nil),    // 1: quicfec.RaptorQParams
	(*QuicParams)(nil),       // 2: quicfec.QuicParams
	(*NetScenario)(nil),      // 3: quicfec.NetScenario
	(*ExperimentConfig)(nil), // 4: quicfec.ExperimentConfig
	(*Observation)(nil),      // 5: quicfec.Observation
	(*Action)(nil),           // 6: quicfec.Action
	(*StepRequest)(nil),      // 7: quicfec.StepRequest
	(*StepMetrics)(nil),      // 8: quicfec.StepMetrics
	(*StepResponse)(nil),     // 9: quicfec.StepResponse
	(*emptypb.Empty)(nil),    // 10: google.protobuf.Empty
}
var file_quicfec_proto_depIdxs = []int32{
	0,  // 0: quicfec.ExperimentConfig.scheme:type_name -> quicfec.FecScheme
	1,  // 1: quicfec.ExperimentConfig.rq:type_name -> quicfec.RaptorQParams
	2,  // 2: quicfec.ExperimentConfig.quic:type_name -> quicfec.QuicParams
	3,  // 3: quicfec.ExperimentConfig.net:type_name -> quicfec.NetScenario
	6,  // 4: quicfec.StepRequest.action:type_name -> quicfec.Action
	5,  // 5: quicfec.StepResponse.obs:type_name -> quicfec.Observation
	8,  // 6: quicfec.StepResponse.metrics:type_name -> quicfec.StepMetrics
	4,  // 7: quicfec.Env.Configure:input_type -> quicfec.ExperimentConfig
	10, // 8: quicfec.Env.Reset:input_type -> google.protobuf.Empty
	7,  // 9: quicfec.Env.Rollout:input_type -> quicfec.StepRequest
	10, // 10: quicfec.Env.Configure:output_type -> google.protobuf.Empty
	5,  // 11: quicfec.Env.Reset:output_type -> quicfec.Observation
	9,  // 12: quicfec.Env.Rollout:output_type -> quicfec.StepResponse
	10, // [10:13] is the sub-list for method output_type
	7,  // [7:10] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_quicfec_proto_init() }
func file_quicfec_proto_init() {
	if File_quicfec_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_quicfec_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaptorQParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuicParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetScenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExperimentConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Observation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_quicfec_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StepResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_quicfec_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_quicfec_proto_goTypes,
		DependencyIndexes: file_quicfec_proto_depIdxs,
		EnumInfos:         file_quicfec_proto_enumTypes,
		MessageInfos:      file_quicfec_proto_msgTypes,
	}.Build()
	File_quicfec_proto = out.File
	file_quicfec_proto_rawDesc = nil
	file_quicfec_proto_goTypes = nil
	file_quicfec_proto_depIdxs = nil
}
