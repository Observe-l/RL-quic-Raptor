// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: quicfec.proto

package quicfec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Env_Configure_FullMethodName = "/quicfec.Env/Configure"
	Env_Reset_FullMethodName     = "/quicfec.Env/Reset"
	Env_Rollout_FullMethodName   = "/quicfec.Env/Rollout"
)

// EnvClient is the client API for Env service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnvClient interface {
	Configure(ctx context.Context, in *ExperimentConfig, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Observation, error)
	Rollout(ctx context.Context, opts ...grpc.CallOption) (Env_RolloutClient, error)
}

type envClient struct {
	cc grpc.ClientConnInterface
}

func NewEnvClient(cc grpc.ClientConnInterface) EnvClient {
	return &envClient{cc}
}

func (c *envClient) Configure(ctx context.Context, in *ExperimentConfig, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Env_Configure_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envClient) Reset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Observation, error) {
	out := new(Observation)
	err := c.cc.Invoke(ctx, Env_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *envClient) Rollout(ctx context.Context, opts ...grpc.CallOption) (Env_RolloutClient, error) {
	stream, err := c.cc.NewStream(ctx, &Env_ServiceDesc.Streams[0], Env_Rollout_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &envRolloutClient{stream}
	return x, nil
}

type Env_RolloutClient interface {
	Send(*StepRequest) error
	Recv() (*StepResponse, error)
	grpc.ClientStream
}

type envRolloutClient struct {
	grpc.ClientStream
}

func (x *envRolloutClient) Send(m *StepRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *envRolloutClient) Recv() (*StepResponse, error) {
	m := new(StepResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EnvServer is the server API for Env service.
// All implementations must embed UnimplementedEnvServer
// for forward compatibility
type EnvServer interface {
	Configure(context.Context, *ExperimentConfig) (*emptypb.Empty, error)
	Reset(context.Context, *emptypb.Empty) (*Observation, error)
	Rollout(Env_RolloutServer) error
	mustEmbedUnimplementedEnvServer()
}

// UnimplementedEnvServer must be embedded to have forward compatible implementations.
type UnimplementedEnvServer struct {
}

func (UnimplementedEnvServer) Configure(context.Context, *ExperimentConfig) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Configure not implemented")
}
func (UnimplementedEnvServer) Reset(context.Context, *emptypb.Empty) (*Observation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedEnvServer) Rollout(Env_RolloutServer) error {
	return status.Errorf(codes.Unimplemented, "method Rollout not implemented")
}
func (UnimplementedEnvServer) mustEmbedUnimplementedEnvServer() {}

// UnsafeEnvServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnvServer will
// result in compilation errors.
type UnsafeEnvServer interface {
	mustEmbedUnimplementedEnvServer()
}

func RegisterEnvServer(s grpc.ServiceRegistrar, srv EnvServer) {
	s.RegisterService(&Env_ServiceDesc, srv)
}

func _Env_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExperimentConfig)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Env_Configure_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServer).Configure(ctx, req.(*ExperimentConfig))
	}
	return interceptor(ctx, in, info, handler)
}

func _Env_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnvServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Env_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnvServer).Reset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Env_Rollout_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EnvServer).Rollout(&envRolloutServer{stream})
}

type Env_RolloutServer interface {
	Send(*StepResponse) error
	Recv() (*StepRequest, error)
	grpc.ServerStream
}

type envRolloutServer struct {
	grpc.ServerStream
}

func (x *envRolloutServer) Send(m *StepResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *envRolloutServer) Recv() (*StepRequest, error) {
	m := new(StepRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Env_ServiceDesc is the grpc.ServiceDesc for Env service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Env_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "quicfec.Env",
	HandlerType: (*EnvServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _Env_Configure_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _Env_Reset_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Rollout",
			Handler:       _Env_Rollout_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "quicfec.proto",
}
